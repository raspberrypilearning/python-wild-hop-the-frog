[
  {
    "filename":"main.py",
    "path":"en\/code\/starter\/",
    "content":"from p5 import *\n\nx = 200 # horizontal middle\ny = 200 # vertical middle\nspeed = 0\ngravity = 1\njumping = False\n\ndef mouse_pressed():\n    global jumping, speed\n    if not jumping:\n        jumping = True\n        speed = -15\n\ndef setup():\n    size(400, 400)\n    no_stroke()\n    global bg\n    bg = load_image('background.png')\n\ndef draw():\n    global y, speed, jumping\n    image(bg, 0, 0, width, height)\n\n    stretch = 30 if jumping else 0\n\n    fill('green')\n    ellipse(x, y, 100, 80 + stretch)                     # body\n    ellipse(x - 30, y + 30, 30, 20 + stretch * 3)        # left foot\n    ellipse(x + 30, y + 30, 30, 20 + stretch * 3)        # right foot\n\n    fill('white')\n    circle(x - 20, y - 40 + stretch \/ 2, 25)             # left eye\n    circle(x + 20, y - 40 + stretch \/ 2, 25)             # right eye\n\n    fill('black')\n    circle(x - 20, y - 40 + stretch \/ 2, 10)             # left pupil\n    circle(x + 20, y - 40 + stretch \/ 2, 10)             # right pupil\n\n    fill('red')\n    ellipse(x, y + 20, 10, 30 - stretch \/ 2)             # tongue\n\n    if jumping:\n        y += speed\n        speed += gravity\n        if y >= 200:\n            y = 200\n            speed = 0\n            jumping = False\n\nrun()\n"
  },
  {
    "filename":"main.py",
    "path":"en\/solutions\/",
    "content":"from p5 import *\n\nx = 200 # horizontal middle\ny = 200 # vertical middle\nspeed = 0\ngravity = 1\njumping = False\n\ndef mouse_pressed():\n    global jumping, speed\n    if not jumping:\n        jumping = True\n        speed = -15\n\ndef setup():\n    size(400, 400)\n    no_stroke()\n    global bg\n    bg = load_image('background.png')\n\ndef draw():\n    global y, speed, jumping\n    image(bg, 0, 0, width, height)\n\n    stretch = 30 if jumping else 0\n\n    fill('green')\n    ellipse(x, y, 100, 80 + stretch)                     # body\n    ellipse(x - 30, y + 30, 30, 20 + stretch * 3)        # left foot\n    ellipse(x + 30, y + 30, 30, 20 + stretch * 3)        # right foot\n\n    fill('white')\n    circle(x - 20, y - 40 + stretch \/ 2, 25)             # left eye\n    circle(x + 20, y - 40 + stretch \/ 2, 25)             # right eye\n\n    fill('black')\n    circle(x - 20, y - 40 + stretch \/ 2, 10)             # left pupil\n    circle(x + 20, y - 40 + stretch \/ 2, 10)             # right pupil\n\n    fill('red')\n    ellipse(x, y + 20, 10, 30 - stretch \/ 2)             # tongue\n\n    if jumping:\n        y += speed\n        speed += gravity\n        if y >= 200:\n            y = 200\n            speed = 0\n            jumping = False\n\nrun()\n"
  },
  {
    "filename":"project_config.yml",
    "path":"en\/code\/starter\/",
    "content":"name: \"Hop the Frog\"\nidentifier: \"python-wild-hop-the-frog\"\ntype: python\nbuild: true\n"
  },
  {
    "filename":"step_1.md",
    "path":"en\/",
    "content":"<h2 class=\"c-project-heading--task\">Add a background<\/h2>\n--- task ---\nAdd an image that fills the screen with a pond background. \ud83d\udc38\ud83c\udf3f\n--- \/task ---\n\n<h2 class=\"c-project-heading--explainer\">Set the scene<\/h2>\n\nLet\u2019s start by adding a pond background to your screen.  \nYou\u2019ll use `load_image()` to load a picture and `image()` to draw it each frame.\n\nThe image is already provided and saved as **`background.png`** in the same folder as your code.\n\n<div class=\"c-project-code\">\n--- code ---\n---\nlanguage: python\nfilename: main.py\nline_numbers: true\nline_number_start: 1\nline_highlights: 12-13, 17\n---\nfrom p5 import *\n\nx = 200 # horizontal middle\ny = 200 # vertical middle\nspeed = 0\ngravity = 1\njumping = False\n\ndef setup():\n    size(400, 400)\n    no_stroke()\n    global bg\n    bg = load_image('background.png')\n\n\ndef draw():\n    image(bg, 0, 0, width, height)\n    \n    # Draw Frog here\n\nrun()\n--- \/code ---\n<\/div>\n\n<div class=\"c-project-output\">\n![A full-screen pond background](images\/step_1.png)\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--tip\">\n\n### Tip\n\nThe `image()` function places the image at a position.  <br \/>\nTo fill the screen, pass in `0, 0, width, height`.\n\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--debug\">\n\n### Debugging\n\nIf the background doesn\u2019t appear:<br \/>\n- Make sure `load_image('background.png')` is inside `setup()`<br \/>\n- Double-check the spelling of the file name<br \/>\n- Use `image(bg, 0, 0, width, height)` in `draw()`\n\n<\/div>"
  },
  {
    "filename":"step_2.md",
    "path":"en\/",
    "content":"<h2 class=\"c-project-heading--task\">Draw the frog<\/h2>\n--- task ---\nUse ellipses to draw the frog\u2019s body and feet. \ud83d\udc38\ud83d\udc63\n--- \/task ---\n\n<h2 class=\"c-project-heading--explainer\">Draw the body and feet<\/h2>\n\nYour frog needs a body and feet!  \nYou\u2019ll use `ellipse()` to draw ovals. \ud83e\udd5a\n\nThe `ellipse()` function takes **4 arguments**:\n- x position\n- y position\n- width\n- height\n\nEach part of the frog is placed **relative to `x` and `y`**.  \nThis will make it easy to animate later on.\n\n<div class=\"c-project-code\">\n--- code ---\n---\nlanguage: python\nfilename: main.py\nline_numbers: true\nline_number_start: 16\nline_highlights: 20-23\n---\ndef draw():\n    image(bg, 0, 0, width, height)\n    \n    # Draw Frog here\n    fill('green')\n    ellipse(x, y, 100, 80)               # body\n    ellipse(x - 30, y + 30, 30, 20)      # left foot\n    ellipse(x + 30, y + 30, 30, 20)      # right foot\n--- \/code ---\n<\/div>\n\n<div class=\"c-project-output\">\n![A green frog body and feet sitting on a lily pad](images\/step_2.png)\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--tip\">\n\n### Tip\n\nTry changing the numbers to see how the shapes move!  <br \/>\nNotice how each part is drawn **after** the background \u2014 otherwise it would be hidden. \ud83c\udfa8\n\n<\/div>"
  },
  {
    "filename":"step_3.md",
    "path":"en\/",
    "content":"<h2 class=\"c-project-heading--task\">Draw the eyes and tongue<\/h2>\n--- task ---\nAdd white eyes with black pupils, and a red tongue underneath the frog.\n--- \/task ---\n\n<h2 class=\"c-project-heading--explainer\">Add some character<\/h2>\n\nLet\u2019s make your frog more expressive by adding two white eyes, black pupils, and a red tongue. \ud83d\udc40\ud83d\udc45\n\nWe\u2019ll use `circle(x, y, size)` for the eyes and pupils \u2014 circles are just a simpler version of ellipses.\n\n<div class=\"c-project-code\">\n--- code ---\n---\nlanguage: python\nfilename: main.py\nline_numbers: true\nline_number_start: 23\nline_highlights: 32-34, 36-38, 40-41\n---\ndef draw():\n    image(bg, 0, 0, width, height)\n    # Draw Frog here\n\n    fill('green')\n    ellipse(x, y, 100, 80)               # body\n    ellipse(x - 30, y + 30, 30, 20)      # left foot\n    ellipse(x + 30, y + 30, 30, 20)      # right foot\n\n    fill('white')\n    circle(x - 20, y - 40, 25)           # left eye\n    circle(x + 20, y - 40, 25)           # right eye\n\n    fill('black')\n    circle(x - 20, y - 40, 10)           # left pupil\n    circle(x + 20, y - 40, 10)           # right pupil\n\n    fill('red')\n    ellipse(x, y + 20, 10, 30)           # tongue\n--- \/code ---\n<\/div>\n\n<div class=\"c-project-output\">\n![A cartoon frog with white eyes, black pupils, and a red tongue](images\/step_3.png)\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--tip\">\n\n### Tip\n\nTry changing the size of the eyes or tongue!  \nWhat happens if you move the pupils closer together or further apart?\n\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--debug\">\n\n### Debugging\n\nIf your eyes or tongue aren\u2019t showing:<br \/>\n- Make sure each shape has the right number of values<br \/>\n- Use `fill()` before drawing each part<br \/>\n- Check for typos in `circle()` and `ellipse()`\n\n<\/div>"
  },
  {
    "filename":"step_4.md",
    "path":"en\/",
    "content":"<h2 class=\"c-project-heading--task\">Make the frog jump up<\/h2>\n--- task ---\nUse a variable to move the frog upwards when you click the mouse. \ud83d\uddb1\ufe0f\u2b06\ufe0f\n--- \/task ---\n\n<h2 class=\"c-project-heading--explainer\">Time to hop!<\/h2>\n\nLet\u2019s get your frog moving! \ud83d\udc38\ud83d\udca8  \nYou\u2019ll make it jump upwards when the mouse is clicked.\n\nWe use a variable called `jumping` to keep track of whether the frog is in the air.  \n- When you click, we set `jumping = True`  \n- While `jumping` is `True`, the frog moves up using a `speed` value\n\nTo make the frog leap, we give it a small negative `speed` like `-15`.  \nThis makes the `y` position go up \u2014 remember, in code, smaller `y` means higher up on the screen! \ud83c\udfaf\n\n<div class=\"c-project-code\">\n--- code ---\n---\nlanguage: python\nfilename: main.py\nline_numbers: true\nline_number_start: 6\nline_highlights: 9-13, 24, 44-45\n---\ngravity = 1\njumping = False\n\ndef mouse_pressed():\n    global jumping, speed\n    if not jumping:\n        jumping = True\n        speed = -15\n\n\ndef setup():\n    size(400, 400)\n    no_stroke()\n    global bg\n    bg = load_image('background.png')\n\n\ndef draw():\n    global y, speed, jumping\n    image(bg, 0, 0, width, height)\n    \n    # Draw Frog here\n    fill('green')\n    ellipse(x, y, 100, 80)               # body\n    ellipse(x - 30, y + 30, 30, 20)      # left foot\n    ellipse(x + 30, y + 30, 30, 20)      # right foot\n\n    fill('white')\n    circle(x - 20, y - 40, 25)           # left eye\n    circle(x + 20, y - 40, 25)           # right eye\n\n    fill('black')\n    circle(x - 20, y - 40, 10)           # left pupil\n    circle(x + 20, y - 40, 10)           # right pupil\n\n    fill('red')\n    ellipse(x, y + 20, 10, 30)           # tongue\n\n    if jumping:\n        y += speed\n--- \/code ---\n<\/div>\n\n<div class=\"c-project-output\">\n![A frog mid-jump after clicking](images\/step_4.png)\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--tip\">\n\n### Tip \ud83e\udde0\n\nTry changing the `speed` to `-10` or `-20` and see how high the frog jumps. <br \/>\nLower numbers = smaller jumps. Higher numbers = big hops! \ud83d\udc38\ud83d\ude80\n\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--debug\">\n\n### Debugging \ud83d\udee0\ufe0f\n\nIf your frog doesn\u2019t move:<br \/>\n- Make sure `mouse_pressed()` is spelled correctly<br \/>\n- Check that `jumping = True` and `speed = -15` are set<br \/>\n- Look for `y += speed` inside the `if jumping:` block\n\n<\/div>"
  },
  {
    "filename":"step_5.md",
    "path":"en\/",
    "content":"<h2 class=\"c-project-heading--task\">Make the frog fall back down<\/h2>\n--- task ---\nUse gravity to bring your frog back to the ground after it jumps. \ud83e\ude82\n--- \/task ---\n\n<h2 class=\"c-project-heading--explainer\">Falling with style<\/h2>\n\nRight now, your frog jumps up and stays there. Let\u2019s bring it back down to earth! \ud83c\udf0d  \nWe\u2019ll use gravity to pull it down over time and land it safely.\n\nHere\u2019s how it works:  \n- While `jumping` is `True`, we add `gravity` to `speed`  \n- This makes the frog slow down, then fall faster and faster  \n- When the frog reaches the ground, we reset its position and stop the jump\n\n<div class=\"c-project-code\">\n--- code ---\n---\nlanguage: python\nfilename: main.py\nline_numbers: true\nline_number_start: 44\nline_highlights: 46-50\n---\n    if jumping:\n        y += speed\n        speed += gravity\n        if y >= 200:\n            y = 200\n            speed = 0\n            jumping = False\n--- \/code ---\n<\/div>\n\n<div class=\"c-project-output\">\n![A frog mid-jump returning to land](images\/step_5.png)\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--tip\">\n\n### Tip \ud83c\udf1f\n\nTry changing the `gravity` value. <br \/>\nA higher number will make the frog fall faster. <br \/>\nA smaller number will give your frog a gentler landing! \ud83d\udc38\ud83c\udf2c\ufe0f\n\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--debug\">\n\n### Debugging \ud83e\uddf0\n\nIf your frog never lands:<br \/>\n- Make sure `speed += gravity` is inside the `if jumping:` block<br \/>\n- Check for `y >= 200` as the landing condition<br \/>\n- Don't forget to reset `speed = 0` and `jumping = False`\n\n<\/div>"
  },
  {
    "filename":"step_6.md",
    "path":"en\/",
    "content":"<h2 class=\"c-project-heading--task\">Stretch the frog<\/h2>\n--- task ---\nStretch your frog\u2019s body when it\u2019s in the air. \ud83d\udc38\ud83d\udccf\n--- \/task ---\n\n<h2 class=\"c-project-heading--explainer\">Leaping taller<\/h2>\n\nWhen a frog jumps, it stretches its body to look like it's really pushing off the ground.  \nWe can use a variable to make the body longer while the frog is in the air.\n\nWe\u2019ll create a `stretch` variable and add it to the frog\u2019s height when `jumping = True`.\n\n<div class=\"c-project-code\">\n--- code ---\n---\nlanguage: python\nfilename: main.py\nline_numbers: true\nline_number_start: 23\nline_highlights: 26, 30\n---\ndef draw():\n    global y, speed, jumping\n    image(bg, 0, 0, width, height)\n    stretch = 30 if jumping else 0\n    \n    # Draw Frog here\n    fill('green')\n    ellipse(x, y, 100, 80 + stretch)     # body\n--- \/code ---\n<\/div>\n\n<div class=\"c-project-output\">\n![A frog with a stretched body in mid-air](images\/step_6.png)\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--tip\">\n\n### Tip\n\nTry changing the `30` to `20` or `40` to adjust the stretch. <br \/>\nYou can even change the value while jumping to make the stretch more dramatic! \ud83c\udfad\n\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--debug\">\n\n### Debugging\n\nIf your frog doesn\u2019t stretch:<br \/>\n- Check that `stretch = 30 if jumping else 0` comes before the `ellipse()`<br \/>\n- Make sure you\u2019re using `80 + stretch` for the body height\n\n<\/div>"
  },
  {
    "filename":"step_7.md",
    "path":"en\/",
    "content":"<h2 class=\"c-project-heading--task\">Stretch the frog\u2019s legs<\/h2>\n--- task ---\nMake the frog\u2019s feet stretch as it jumps. \ud83d\udc3e\n--- \/task ---\n\n<h2 class=\"c-project-heading--explainer\">Push off with power!<\/h2>\n\nNow let\u2019s stretch the frog\u2019s legs as it leaps.  \nWe\u2019ll change the **height** of the feet using the same `stretch` variable.\n\nMultiply the `stretch` by a number to exaggerate the leg movement.  \nTry `stretch * 2` or `stretch * 3`!\n\n<div class=\"c-project-code\">\n--- code ---\n---\nlanguage: python\nfilename: main.py\nline_numbers: true\nline_number_start: 23\nline_highlights: 31-32\n---\ndef draw():\n    global y, speed, jumping\n    image(bg, 0, 0, width, height)\n    fill('green')\n\n    stretch = 30 if jumping else 0\n\n    ellipse(x, y, 100, 80 + stretch)                     # body\n    ellipse(x - 30, y + 30, 30, 20 + stretch * 3)        # left foot\n    ellipse(x + 30, y + 30, 30, 20 + stretch * 3)        # right foot\n--- \/code ---\n<\/div>\n\n<div class=\"c-project-output\">\n![A frog mid-jump with stretched feet](images\/step_7.png)\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--tip\">\n\n### Tip\n\nIf the feet stretch too much, try multiplying by a smaller number. <br \/>\nStretching by `stretch * 2` will look gentler than `stretch * 3`.\n\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--debug\">\n\n### Debugging\n\nIf the feet look wrong:<br \/>\n- Make sure you're adding `stretch * 3` to the **height** of each foot<br \/>\n- Double-check the position of the feet is still `x - 30` and `x + 30`\n\n<\/div>"
  },
  {
    "filename":"step_8.md",
    "path":"en\/",
    "content":"<h2 class=\"c-project-heading--task\">Stretch the eyes and tongue<\/h2>\n--- task ---\nMake the frog\u2019s eyes rise and its tongue shrink when it jumps! \ud83d\udc40\ud83d\udc45\n--- \/task ---\n\n<h2 class=\"c-project-heading--explainer\">Finishing touches<\/h2>\n\nLet\u2019s stretch the eyes so they rise during a jump, and shrink the tongue to make it look like it\u2019s pulling up from the lily pad.\n\nUse the same `stretch` variable to change the `y` positions and height.  \nThis adds polish to the animation! \u2728\n\n<div class=\"c-project-code\">\n--- code ---\n---\nlanguage: python\nfilename: main.py\nline_numbers: true\nline_number_start: 34\nline_highlights: 35-36, 39-40, 43\n---\n    fill('white')\n    circle(x - 20, y - 40 + stretch \/ 2, 25)   # left eye\n    circle(x + 20, y - 40 + stretch \/ 2, 25)   # right eye\n\n    fill('black')\n    circle(x - 20, y - 40 + stretch \/ 2, 10)   # left pupil\n    circle(x + 20, y - 40 + stretch \/ 2, 10)   # right pupil\n\n    fill('red')\n    ellipse(x, y + 20, 10, 30 - stretch \/ 2)   # tongue\n--- \/code ---\n<\/div>\n\n<div class=\"c-project-output\">\n![Frog with rising eyes and shrinking tongue mid-jump](images\/step_8.png)\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--tip\">\n\n### Tip\n\nAdding or subtracting part of `stretch` from the eye or tongue position will animate them. <br \/>\nSmaller stretch = lower eyes and longer tongue. <br \/>\nBigger stretch = higher eyes and a shorter tongue!\n\n<\/div>\n\n<div class=\"c-project-callout c-project-callout--debug\">\n\n### Debugging\n\nIf the eyes or tongue look strange:<br \/>\n- Double-check the `+ stretch \/ 2` or `- stretch \/ 2` parts<br \/>\n- Make sure you update both the white and black circles for each eye<br \/>\n- Try printing the `stretch` value to see what it\u2019s doing\n\n<\/div>"
  },
  {
    "filename":"mentor.md",
    "path":"en\/resources\/",
    "content":"# Mentor Notes: Hop the Frog\n\n## Project Overview\n\nIn this Python Wild project, learners use the p5 library to build a cartoon frog that hops into the air and stretches mid-jump. They practise drawing, animation, and interactive behaviours using Python code.\n\n---\n\n## What Learners Will Practise\n\n- Drawing with `ellipse()` and `circle()`\n- Using variables to animate motion\n- Handling mouse input with `mouse_pressed()`\n- Stretching and squashing shapes with logic\n- Coordinating motion with gravity and state tracking\n\n---\n\n## Teaching Tips\n\n- Reinforce that `draw()` runs like a loop \u2014 it repeats automatically\n- Use simple language for motion and animation (e.g. \u201cgravity pulls the frog down\u201d)\n- Emphasise that `x` and `y` are reused for positioning every part of the frog\n- Explain that `stretch` is used to change multiple shapes with one variable\n\n---\n\n## Extension Ideas\n\n- Add a bug to catch with the tongue\n- Give the frog a crown, cheeks, or animated arms\n- Add lily pads or water splashes in the background\n"
  },
  {
    "filename":"meta.yml",
    "path":"en\/",
    "content":"title: Hop the Frog\nhero_image: images\/step_8.png\ndescription: Make a cartoon frog that jumps, stretches, and squashes as it hops through your code.\nmeta_title: Learn to code with Python Wild | Hop the Frog\nmeta_description: Learn Python with the Raspberry Pi Foundation. Code a cartoon frog that hops and stretches with animation.\nversion: 1\nlisted: false\ncopyedit: false\nlast_tested: \"2025-04-11\"\nsteps:\n  - title: step_1\n  - title: step_2\n    completion:\n        - engaged\n  - title: step_3\n  - title: step_4\n  - title: step_5\n  - title: step_6\n  - title: step_7\n  - title: step_8\n    completion:\n      - internal\n      - external\n"
  },
  {
    "filename":"README.md",
    "path":"",
    "content":"# Hop the Frog\n\n![A cartoon frog jumping over a pond with lily pads and a flower](en\/images\/banner.png)\n\nMake a cartoon frog that jumps, stretches, and squashes as it hops through your code.\n\nFind the project online at [projects.raspberrypi.org\/en\/projects\/python-wild-hop-the-frog](https:\/\/projects.raspberrypi.org\/en\/projects\/python-wild-hop-the-frog)\n\n## Resources\nFor project materials and solutions, see [en\/resources](https:\/\/github.com\/raspberrypilearning\/python-wild-hop-the-frog\/tree\/master\/en\/resources) and [en\/solutions](https:\/\/github.com\/raspberrypilearning\/python-wild-hop-the-frog\/tree\/master\/en\/solutions).\n\n## Contributing\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n## Licence\nSee [LICENCE.md](LICENCE.md)\n"
  },
  {
    "filename":"CONTRIBUTING.md",
    "path":"",
    "content":"# Contributing\n\nAll contributions are assumed to be licensed under the same licence as the source, i.e. [CC BY-SA](http:\/\/creativecommons.org\/licenses\/by-sa\/4.0\/). This licence must remain in all derivatives of this work.\n\n## Issues\n\nIf you find a mistake, bug, or other problem, please [open an issue](https:\/\/github.com\/raspberrypilearning\/python-wild-hop-the-frog\/issues) in this repository.\n\n## Pull requests\n\nAll edits to a resource should be made to the draft branch or to a fork of the repo. These patches can then be submitted as a pull request.\n\nIf you fix a mistake, bug, or problem or have something to contribute, please create a pull request for each modification. Please consider grouping modifications sensibly, e.g. don't bundle typo fixes in the same pull request as code changes, file them separately instead.\n\nPlease note that sometimes things are done for pedagogical reasons so changes which make sense from a software engineering perspective (reducing duplication or making use of more advanced programming language features) may not be suitable to maintain the intended educational value.\n\n## Derivatives\n\nSee [LICENCE.md](LICENCE.md) for content licence. The licence must remain in all derivatives of this work.\n\n## Translation\n\nYou can help us make this project available to more people around the world by translating it. For more information, please go to [rpf.io\/translate](https:\/\/rpf.io\/translate).\n"
  },
  {
    "filename":"LICENCE.md",
    "path":"",
    "content":"# Licence\n\nUnless otherwise specified, everything in this repository is covered by the following licence:\n\n[![Creative Commons licence](http:\/\/i.creativecommons.org\/l\/by-sa\/4.0\/88x31.png)](http:\/\/creativecommons.org\/licenses\/by-sa\/4.0\/)\n\n**Hop the Frog** by the [Raspberry Pi Foundation](http:\/\/www.raspberrypi.org) is licensed under a [Creative Commons Attribution 4.0 International licence](http:\/\/creativecommons.org\/licenses\/by-sa\/4.0\/).\n\nBased on a work at https:\/\/github.com\/raspberrypilearning\/python-wild-hop-the-frog.\n"
  },
  {
    "filename":"crowdin.yml",
    "path":"",
    "content":"files:\n  - source: \/en\/**\/.*\n    translation: \/%locale%\/**\/%original_file_name%\n"
  },
  {
    "filename":"banner.png",
    "path":"en\/images\/",
    "content":""
  }
]